###about 进程
	每一个进程在内核中都有一个进程控制快（pcb）来维持进程的相关信息，linux内核的进程控制块是task_struct 结构体。
###进程状态
	-运行
	-挂起
	-等待
	-僵尸
####fork() and exec()
	1.fork()作用是根据现有的进程复制出一个新的进程，原来的为父进程，新的是子进程。
	2.exec() 作用是执行新程序。
	-fork 是负责复制新进程，然后调用exec执行新程序。
####环境变量
	修改环境变量------setenv("PATH", "mypath"， 1) 
		-1代表覆盖原来定义
		-0代表不覆盖原来定义，也不返回错误
	打印环境变量-------getenv("PATH")
####fork()
	-父子进程具有相同的PCB。
	-父子进程谁先从内核返回是不确定的。有内核的调度算法决定。
	-父子进程的id不同
	-全局变量的地址是相同
	-调用一次返回两次
	-子进程可以调用getpid（）得到自己的进程号。也可以调用getppid（）得到父进程的id。
	-父进程可以通过getpid（）得到自己的进程号，但是只能通过fork的返回值得到。
####输入重定向
	-fd = open("a.txt", O_RDONLY);
	-dup2(fd, 0);
	-close(fd);
####输出重定向
	-fd = open("a.txt", O_WRONLY);
	-dup2(fd, 1);
	-close(fd);
###僵尸进程
	-一个进程终止，但是他的父进程没有调用wait（）或者waitpid（）对他进行清理。
	-任何进程在刚结束时都是僵尸进程。
###进程间通信（IPC）
	-每个进程都有各自不同的地址空间，任何一个进程的全局变量在另外一个进程里是看不到的。所以进程间通信必须要经过内核。在内核开辟一块缓冲区，进程1把数据拷到缓冲区，进程2在缓冲区把数据拷走。
	-pipe（管道）是一种最基本的IPC机制。
	-调用pipe函数是在内核开辟一块缓冲区，他又一个读端一个写端。
	-fd【0】代表读端，fd【1】代表写端。
###管道
	-父进程调用pipe开辟管道，得到两个文件描述符指向管道的两端。
	-父进程调用fork（）创建子进程，子进程也有两个文件描述符指向同一个管道。
	-父进程关闭管道读端，子进程关闭管道写端，父进程往管道里写，子进程往管道里读。
